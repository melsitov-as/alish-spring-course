Проблема

Зависимости появляются очень часто в коде

Использовать интерфейс (или абстрактный класс), который бы обобщал разные музыкальные жанры

Проблема 2
Объекты создаются вручную. Мы хотим перенести эти детали в конфигурационный файл, а не лезть каждый раз в код  
(и перекомплировать его) для того, чтобы поменять объект

Решение:
Использовать Spring Framework, который сам создаст необходимые объекты (бины) согласно конфигурационному файлу

Bean
- это просто java объект
- когда java-объекты создаются с помощью spring'a они называются бинами
- бины создаются из java-классов (так же как и обычные объекты)

Inversion of control
- MusicPlayer зависит от ClassicalMusic
- MusicPlayer сам создает объект ClassicalMusic
- Вместо этого мы хотим передавать объект ClassicalMusic внутрь MusicPlayer - 
это и называется инверсией управления (IoC)

Инверсия управления - это такой архитектурный подход, когда сущность не сама создает свои зависимости, а 
когда этой сущности зависимости поставляются извне

Spring можно конфигурировать
- с помощью xml-файла
- java аннотаций и немного xml (современный способ)
- вся конфигурация на java коде (современный способ)